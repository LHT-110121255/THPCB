<div class="container mt-4">
    <h1 class="title-add-class text-center mb-4">T·∫°o l·ªõp h·ªçc m·ªõi</h1>

    <div class="text-end mb-3">
        <button class="btn btn-info" id="openModalBtn">Xem danh s√°ch l·ªõp</button>
    </div>

    <div id="manualForm">
        <form id="createClassForm" enctype="multipart/form-data" class="col-md-10 offset-md-1">
            <!-- Kh·ªëi -->
            <div class="mb-3">
                <label class="form-label">Kh·ªëi</label>
                <select class="form-select" name="Khoi" required>
                    <option value="">-- Ch·ªçn kh·ªëi --</option>
                    <option value="1">Kh·ªëi 1</option>
                    <option value="2">Kh·ªëi 2</option>
                    <option value="3">Kh·ªëi 3</option>
                    <option value="4">Kh·ªëi 4</option>
                    <option value="5">Kh·ªëi 5</option>
                </select>
            </div>

            <!-- T√™n l·ªõp -->
            <div class="mb-3">
                <label class="form-label">T√™n l·ªõp</label>
                <input type="text" class="form-control" name="TenLop" required>
            </div>

            <!-- Gi√°o vi√™n ch·ªß nhi·ªám -->
            <div class="mb-3">
                <label class="form-label">Gi√°o vi√™n ch·ªß nhi·ªám</label>
                <input type="text" class="form-control" name="TenGiaoVien" required>
            </div>

            <!-- B·∫£ng ch·ªçn m√¥n -->
            <div class="mb-3">
                <label class="form-label">Ch·ªçn m√¥n h·ªçc</label>
                <table id="dataTable" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Ch·ªçn</th>
                            <th>M√¥n h·ªçc</th>
                            <th>S·ªë ti·∫øt</th>
                            <th>Gi√°o vi√™n</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each subjects}}
                        <tr data-id="{{this._id}}" data-name="{{this.name}}">
                            <td><input type="checkbox" class="subject-check"></td>
                            <td>{{this.name}}</td>
                            <td>
                                <input type="number" class="form-control period-input" min="0" value="0" placeholder="0">
                            </td>
                            <td class="teacher-cell">
                                {{#if this.ChuyenMon}}
                                    {{#if this.teacher}}
                                        <span class="teacher-text">{{this.teacher}}</span>
                                    {{else}}
                                        <span class="text-muted">Ch∆∞a c√≥ gi√°o vi√™n</span>
                                    {{/if}}
                                {{else}}
                                    <span class="text-muted small">M√¥n kh√¥ng y√™u c·∫ßu chuy√™n m√¥n</span>
                                {{/if}}
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-system btn-submit" id="submitBtn">L∆∞u</button>
            </div>
        </form>
    </div>
</div>

<style>
    /* Canh gi·ªØa modal scrollable */
.modal-dialog-scrollable {
  display: flex;
  align-items: center; /* canh gi·ªØa theo chi·ªÅu d·ªçc */
  min-height: 100vh; /* chi·∫øm ƒë·ªß chi·ªÅu cao m√†n h√¨nh */
}

.modal-content {
  max-height: 90vh; /* tr√°nh qu√° cao, scroll b√™n trong */
  overflow-y: auto;
}

</style>
<!-- Modal -->
<div class="modal fade" id="classModal" tabindex="-1" aria-hidden="true" style="margin-left: 10%;">
  <div class="modal-dialog modal-xl modal-dialog-scrollable modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Danh s√°ch l·ªõp h·ªçc</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
            <label>L·ªçc theo l·ªõp:</label>
            <select id="filterClass" class="form-select w-auto d-inline-block">
                <option value="">-- T·∫•t c·∫£ --</option>
            </select>
        </div>
        <table class="table table-bordered table-striped" id="classListTable">
            <thead>
                <tr>
                    <th>L·ªõp</th>
                    <th>Kh·ªëi</th>
                    <th>GVCN</th>
                    <th>M√¥n h·ªçc</th>
                    <th>Gi√°o vi√™n</th>
                    <th>S·ªë ti·∫øt</th>
                    <th>Chuy√™n m√¥n</th>
                    <th>H√†nh ƒë·ªông</th>
                </tr>
            </thead>
            <tbody id="classListBody"></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const table = $("#dataTable").DataTable();
    let classroomsData = [];

    const loadClassrooms = async () => {
        try {
            const res = await fetch("/api/tkb/getsub-classroom");
            const data = await res.json();
            if(data.success) {
                classroomsData = data.classrooms;
                populateFilter();
                populateModal();
            }
        } catch (err) {
            console.error(err);
        }
    };

    const populateFilter = () => {
        const filter = document.getElementById("filterClass");
        filter.innerHTML = '<option value="">-- T·∫•t c·∫£ --</option>';
        classroomsData.forEach(c => {
            const opt = document.createElement("option");
            opt.value = c._id;
            opt.textContent = c.name;
            filter.appendChild(opt);
        });
    };

    const populateModal = () => {
    const tbody = document.getElementById("classListBody");
    tbody.innerHTML = "";

    classroomsData.forEach(c => {
        const tr = document.createElement("tr");

        // Gom t·∫•t c·∫£ m√¥n h·ªçc th√†nh chu·ªói HTML
        const subjectsHTML = c.subjects.map(s => s.name).join("<br>");
        const teachersHTML = c.subjects.map(s => s.teacher || "Ch∆∞a c√≥ gi√°o vi√™n").join("<br>");
        const periodsHTML = c.subjects.map(s => s.SoTiet).join("<br>");
        const specializeHTML = c.subjects.map(s => s.ChuyenMon ? "‚úîÔ∏è" : "").join("<br>");

        tr.innerHTML = `
            <td>${c.name}</td>
            <td>${c.Khoi}</td>
            <td>${c.GVCN}</td>
            <td>${subjectsHTML}</td>
            <td>${teachersHTML}</td>
            <td>${periodsHTML}</td>
            <td>${specializeHTML}</td>
            <td>
                <button class="btn btn-sm btn-warning editBtn">S·ª≠a</button>
                <button class="btn btn-sm btn-danger deleteBtn">Xo√°</button>
            </td>
        `;

        // S·ª≠a l·ªõp
        tr.querySelector(".editBtn").addEventListener("click", () => {
            Swal.fire({
                icon: 'info',
                title: 'Ch∆∞a c√≥ t√≠nh nƒÉng',
                text: 'T√≠nh nƒÉng s·ª≠a l·ªõp h·ªçc ch∆∞a ƒë∆∞·ª£c ph√°t tri·ªÉn üòÖ',
                confirmButtonText: 'Ok'
            });
        });

        // Xo√° nguy√™n l·ªõp
        tr.querySelector(".deleteBtn").addEventListener("click", () => {
            Swal.fire({
                title: "X√°c nh·∫≠n xo√° l·ªõp",
                text: `B·∫°n c√≥ ch·∫Øc mu·ªën xo√° l·ªõp "${c.name}" v√† t·∫•t c·∫£ m√¥n h·ªçc trong l·ªõp n√†y kh√¥ng?`,
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "C√≥, xo√° l·ªõp",
                cancelButtonText: "H·ªßy"
            }).then(async (result) => {
                if(result.isConfirmed){
                    try {
                        const res = await fetch(`/api/tkb/classroom/delete/${c._id}`, {
                            method: "DELETE"
                        });
                        const data = await res.json();
                        if(data.success){
                            Swal.fire("Th√†nh c√¥ng", `ƒê√£ xo√° l·ªõp "${c.name}"!`, "success");
                            loadClassrooms();
                        } else {
                            Swal.fire("L·ªói", data.message || "Xo√° l·ªõp th·∫•t b·∫°i", "error");
                        }
                    } catch(err){
                        console.error(err);
                        Swal.fire("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi server", "error");
                    }
                }
            });
        });

        tbody.appendChild(tr);
    });
};
    document.getElementById("openModalBtn").addEventListener("click", () => {
        populateModal();
        new bootstrap.Modal(document.getElementById("classModal")).show();
    });

    document.getElementById("filterClass").addEventListener("change", function() {
        populateModal(this.value);
    });

    // Khi nh·∫≠p s·ªë ti·∫øt th√¨ t·ª± tick checkbox
    $("#dataTable").on("input", ".period-input", function () {
        const row = $(this).closest("tr");
        row.find(".subject-check").prop("checked", true);
    });

    // Khi thay ƒë·ªïi t√™n GVCN th√¨ g√°n v√†o 3 m√¥n: Ti·∫øng Vi·ªát, To√°n, SHTT
    $("input[name='TenGiaoVien']").on("change", function () {
        const gvcn = $(this).val().trim();
        $(".teacher-cell").each(function () {
            const subjectName = $(this).closest("tr").data("name");
            if (["Ti·∫øng Vi·ªát", "To√°n", "SHTT"].includes(subjectName)) {
                $(this).find(".teacher-text").text(gvcn || "Ch∆∞a c√≥ gi√°o vi√™n");
            }
        });
    }).trigger("change");

    // X·ª≠ l√Ω submit (t·∫°o ho·∫∑c c·∫≠p nh·∫≠t)
    document.getElementById("createClassForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        let subjects = [];
        let valid = true;
        const gvcn = this.TenGiaoVien.value.trim();

        table.rows().every(function () {
            const row = $(this.node());
            const checkbox = row.find(".subject-check")[0];

            if (checkbox && checkbox.checked) {
                const soTiet = +row.find(".period-input").val() || 0;
                const subjectId = row.attr("data-id");
                const subjectName = row.data("name");
                let teacher = "";

                if (["Ti·∫øng Vi·ªát", "To√°n", "SHTT"].includes(subjectName)) {
                    teacher = gvcn;
                } else {
                    teacher = row.find(".teacher-text").text().trim();
                }

                if (soTiet <= 0) {
                    row.find(".period-input").addClass("is-invalid");
                    valid = false;
                } else {
                    row.find(".period-input").removeClass("is-invalid");
                }

                subjects.push({
                    subjectId,
                    SoTiet: soTiet,
                    teacher
                });
            }
        });

        if (!valid) {
            Swal.fire("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p s·ªë ti·∫øt h·ª£p l·ªá cho c√°c m√¥n ƒë√£ ch·ªçn!", "warning");
            return;
        }

        if (subjects.length === 0) {
            Swal.fire("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 m√¥n h·ªçc!", "warning");
            return;
        }

        const formData = {
            TenLop: this.TenLop.value.trim(),
            TenGiaoVien: gvcn,
            Khoi: this.Khoi.value,
            subjects
        };

        try {
            let apiUrl = "/api/tkb/caiDatLopHoc/create";
            if(this.dataset.editId){
                apiUrl = "/api/tkb/classrom/update";
                formData._id = this.dataset.editId;
            }

            const res = await fetch(apiUrl, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });

            const data = await res.json();
            if (data.success) {
                Swal.fire("Th√†nh c√¥ng", data.message || "L·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c l∆∞u!", "success")
                    .then(() => location.reload());
            } else {
                Swal.fire("L·ªói!", data.message || "C√≥ l·ªói x·∫£y ra.", "error");
            }
        } catch (err) {
            console.error("Fetch error:", err);
            Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu ƒë·∫øn server", "error");
        }
    });

    loadClassrooms();
});
</script>
