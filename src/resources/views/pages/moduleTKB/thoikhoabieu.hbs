<div class="container mt-4">
  <div class="text-end mb-3">
  <button class="btn btn-system btn-submit shadow" data-bs-toggle="modal" data-bs-target="#exportModal">
    <i class="bi bi-file-earmark-excel"></i> Xu·∫•t Excel
  </button>
</div>

<!-- Modal -->
<div class="modal fade" id="exportModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow-lg rounded-3">
      <div class="modal-header btn-system btn-submit text-white">
        <h5 class="modal-title">
          <i class="bi bi-file-earmark-excel"></i> Xu·∫•t Excel Th·ªùi Kho√° Bi·ªÉu
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <label for="exportTypeSelect" class="form-label fw-semibold">Ch·ªçn lo·∫°i xu·∫•t:</label>
        <select class="form-select shadow-sm" id="exportTypeSelect">
          <option value="student" selected>üìò Th·ªùi kho√° bi·ªÉu h·ªçc sinh</option>
          <option value="teacher">üë®‚Äçüè´ Th·ªùi kho√° bi·ªÉu d·∫°y</option>
        </select>
      </div>
      <div class="modal-footer">
        <button class="btn btn-outline-secondary" data-bs-dismiss="modal">
          <i class="bi bi-x-circle"></i> ƒê√≥ng
        </button>
        <button class="btn btn-system btn-submit" id="btnExportExcel">
          <i class="bi bi-download"></i> Xu·∫•t File
        </button>
      </div>
    </div>
  </div>
</div>

  <div class="row mb-3">
    <div class="col-md-4">
      <label>Ch·ªçn ƒë·ªëi t∆∞·ª£ng</label>
      <select id="filterTarget" class="form-select">
        <option value="">-- Ch·ªçn --</option>
        <option value="class">L·ªõp</option>
        <option value="teacher">Gi√°o vi√™n</option>
      </select>
    </div>

    <div class="col-md-4" id="gradeGroup">
      <label>Kh·ªëi</label>
      <select id="filterGrade" class="form-select">
        <option value="">-- Ch·ªçn kh·ªëi --</option>
        <option value="1">Kh·ªëi 1</option>
        <option value="2">Kh·ªëi 2</option>
        <option value="3">Kh·ªëi 3</option>
        <option value="4">Kh·ªëi 4</option>
        <option value="5">Kh·ªëi 5</option>
      </select>
    </div>

    <div class="col-md-4">
      <label id="labelClassTeacher">L·ªõp / Gi√°o vi√™n</label>
      <select id="filterClass" class="form-select">
        <option value="">-- Ch·ªçn --</option>
      </select>
    </div>
  </div>

  <div id="timetableContainer" class="table-responsive mt-4" style="display:none;">
    <table class="table table-bordered text-center align-middle">
      <thead class="table-light">
        <tr>
          <th style="width: 150px;">Bu·ªïi / Ti·∫øt</th>
          <th>Th·ª© 2</th>
          <th>Th·ª© 3</th>
          <th>Th·ª© 4</th>
          <th>Th·ª© 5</th>
          <th>Th·ª© 6</th>
        </tr>
      </thead>
      <tbody id="timetableBody"></tbody>
    </table>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
  const btnExportExcel = document.getElementById("btnExportExcel");

  btnExportExcel.addEventListener("click", async function() {
    const type = document.getElementById("exportTypeSelect").value;
    const apiUrl = type === 'student' ? '/api/tkb/xuat-excel-hoc-sinh' : '/api/tkb/xuat-excel-day';

    // Hi·ªán Swal loading
    Swal.fire({
      title: 'ƒêang x·ª≠ l√Ω...',
      text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
      allowOutsideClick: false,
      didOpen: () => { Swal.showLoading(); }
    });

    try {
      const res = await fetch(apiUrl, { method: 'GET' });
      if (!res.ok) throw new Error("Xu·∫•t file th·∫•t b·∫°i");

      const blob = await res.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = type === 'student' ? "TKB_HocSinh.xlsx" : "TKB_Day.xlsx";
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);

      Swal.close();
      Swal.fire("Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng!", "success");

    } catch (err) {
      Swal.close();
      Swal.fire("L·ªói", err.message, "error");
    }
  });
});
document.addEventListener("DOMContentLoaded", function() {
  const filterTarget = document.getElementById("filterTarget");
  const filterGrade = document.getElementById("filterGrade");
  const gradeGroup   = document.getElementById("gradeGroup");
  const filterClass = document.getElementById("filterClass");
  const labelClassTeacher = document.getElementById("labelClassTeacher");
  const timetableContainer = document.getElementById("timetableContainer");
  const timetableBody = document.getElementById("timetableBody");

  let classrooms = [];
  let teachers = [];

  async function loadClassrooms() {
    const grade = filterGrade.value || '';
    const res = await fetch(`/api/tkb/classrooms${grade ? '?grade=' + grade : ''}`);
    const data = await res.json();
    if(data.success) classrooms = data.classes;
  }

  async function loadTeachers() {
    const res = await fetch('/api/tkb/teachers');
    const data = await res.json();
    if(data.success) teachers = data.teachers;
  }

  // Khi ch·ªçn ƒë·ªëi t∆∞·ª£ng
  filterTarget.addEventListener("change", async function() {
    filterClass.innerHTML = '<option value="">-- Ch·ªçn --</option>';

    if(this.value === 'class') {
      gradeGroup.style.display = 'block';
      labelClassTeacher.textContent = "L·ªõp";
      await loadClassrooms();

      const grade = filterGrade.value;
      const filtered = grade ? classrooms.filter(c => c.Khoi === grade) : classrooms;
      filtered.forEach(c => {
        const opt = document.createElement("option");
        opt.value = c._id;
        opt.textContent = c.name;
        filterClass.appendChild(opt);
      });

    } else if(this.value === 'teacher') {
      gradeGroup.style.display = 'none';
      labelClassTeacher.textContent = "Gi√°o vi√™n";
      await loadTeachers();

      teachers.forEach(t => {
        const opt = document.createElement("option");
        opt.value = t;
        opt.textContent = t;
        filterClass.appendChild(opt);
      });
    }
  });

  // Khi ch·ªçn kh·ªëi (ch·ªâ khi target = class)
  filterGrade.addEventListener("change", async function() {
    if(filterTarget.value !== 'class') return;
    await loadClassrooms();
    filterClass.innerHTML = '<option value="">-- Ch·ªçn l·ªõp --</option>';
    const filtered = classrooms.filter(c => c.Khoi === this.value);
    filtered.forEach(c => {
      const opt = document.createElement("option");
      opt.value = c._id;
      opt.textContent = c.name;
      filterClass.appendChild(opt);
    });
  });

  // Khi ch·ªçn l·ªõp ho·∫∑c gi√°o vi√™n
  filterClass.addEventListener("change", async function() {
    const val = this.value;
    if(!val){ timetableContainer.style.display = 'none'; return; }

    let apiUrl = '';
    if(filterTarget.value === 'class'){
      apiUrl = `/api/tkb/xemthoikhoabieuClass/${val}`;
    } else if(filterTarget.value === 'teacher'){
      apiUrl = `/api/tkb/xemthoikhoabieuTeacher/${encodeURIComponent(val)}`;
    }

    const res = await fetch(apiUrl);
    const data = await res.json();
    if(!data.success) return alert(data.message);

    timetableBody.innerHTML = '';

    const DAYS = [2,3,4,5,6]; 
    const maxMorning = 4;
    const maxAfternoon = 3;

    const getSlot = (session, period, day) => {
      return data.slots.find(s => s.session === session && s.period === period && s.day === day);
    };

    // Bu·ªïi s√°ng
    for(let period = 1; period <= maxMorning; period++){
      const tr = document.createElement('tr');
      tr.innerHTML = `<td><strong>S√°ng</strong> - Ti·∫øt ${period}</td>`;
      DAYS.forEach(day => {
        const td = document.createElement('td');
        let slotText = '';

        if(day === 2 && period === 1){ 
          slotText = `<strong>Ch√†o c·ªù</strong>`;
        } else if(day === 6 && period === 4){ 
          slotText = `<strong>SHTT</strong><br><small>GVCN</small>`;
        } else {
          const slot = getSlot('S√°ng', period, day);
          if(slot) slotText = `<strong>${slot.subjectName}</strong><br><small>${slot.teacher}</small>`;
        }

        td.innerHTML = slotText;
        tr.appendChild(td);
      });
      timetableBody.appendChild(tr);
    }

    // Bu·ªïi chi·ªÅu
    for(let period = 1; period <= maxAfternoon; period++){
      const tr = document.createElement('tr');
      tr.innerHTML = `<td><strong>Chi·ªÅu</strong> - Ti·∫øt ${period}</td>`;
      DAYS.forEach(day => {
        const td = document.createElement('td');
        let slotText = '';

        if(day === 6){ 
          slotText = '';
        } else {
          const slot = getSlot('Chi·ªÅu', period, day);
          if(slot) slotText = `<strong>${slot.subjectName}</strong><br><small>${slot.teacher}</small>`;
        }

        td.innerHTML = slotText;
        tr.appendChild(td);
      });
      timetableBody.appendChild(tr);
    }

    timetableContainer.style.display = 'block';
  });
});
</script>
